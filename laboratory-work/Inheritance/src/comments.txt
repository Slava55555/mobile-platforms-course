ИДЕЯ СИСТЕМЫ:
Система представляет иерархию учебных курсов университета с различными
форматами обучения (лекции, лабораторные работы, практические работы).

ДЕТАЛИ РЕАЛИЗАЦИИ:

1. Абстрактный класс Course:
   - Общий параметр: creditUnits (количество ЗЕ)
   - Общие поля: courseCode (код курса), courseName (название), instructor (преподаватель)
   - Абстрактный метод getCourseType() для получения типа курса
   - Абстрактный метод getWorkload() для расчета учебной нагрузки
   - Реализация Comparable для сравнения по количеству кредитов

2. Классы-наследники с уникальными параметрами:
   - LectureCourse: lectureHours (лекционные часы), hasExam (наличие экзамена)
   - LabCourse: labWorks (количество лабораторных работ), labEquipment (оборудование)
   - PracticalCourse: practicalClasses (количество практических работ), requiredMaterials (оборудование)

3. Особенности реализации:
   - Каждый тип курса имеет уникальный ответ getAssessmentType()
   - Переопределение equals() с проверкой всех параметров, включая уникальные
   - Информативные toString() с указанием специфических параметров
   - Гибкая система сравнения и сортировки

4. Демонстрационные возможности:
   - Сортировка курсов по зачетным единицам
   - Группировка по типам курсов
   - Фильтрация по нагрузке
   - Демонстрация работы equals()

Преимущества системы:
- Унифицированное представление различных форматов обучения
- Возможность сравнения курсов по академической нагрузке
- Легкое добавление новых типов курсов (проектные, практические и т.д.)
- Удобство для составления учебных планов и расчета нагрузки студентов